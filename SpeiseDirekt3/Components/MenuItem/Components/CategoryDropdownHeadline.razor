@implements IDisposable
<div class="animate-fade-in">
    <div class="bg-white rounded-lg sm:rounded-xl shadow-sm border border-gray-100 overflow-hidden">
        <div class="px-4 sm:px-6 py-3 sm:py-4 bg-gradient-to-r from-gray-50 to-white border-b border-gray-100 relative"
             @onmouseenter="ShowDropdown" 
             @onmouseleave="HideDropdown"
        >
            
            <!-- Category Headline with Dropdown Trigger -->
            <div class="flex flex-row items-center cursor-pointer select-none"
                 @onclick="ToggleDropdown">
                <div class="w-1 h-4 sm:h-6 bg-blue-500 rounded-full mr-2 sm:mr-3"></div>
                <h2 class="text-lg sm:text-xl font-semibold text-gray-900 flex items-center group">
                    @Category?.Name
                    <svg class="ml-2 w-4 h-4 text-gray-400 transition-transform duration-200 @(isDropdownOpen ? "rotate-180" : "")" 
                         fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </h2>
            </div>

            <!-- Dropdown Menu -->
            <div class="absolute top-full left-0 right-0 z-50 bg-white border border-gray-200 rounded-lg shadow-lg mt-1 transition-all duration-200 ease-in-out @(isDropdownOpen ? "opacity-100 visible translate-y-0" : "opacity-0 invisible -translate-y-4")"
                 @onmouseenter="ShowDropdown" 
                 @onmouseleave="HideDropdown">
                
                <div class="py-2 max-h-64 overflow-y-auto">
                    @if (Categories?.Any() == true)
                    {
                        @foreach (var cat in Categories)
                        {
                            <button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors duration-150 flex items-center @(cat.Id == Category?.Id ? "bg-blue-50 text-blue-600 font-medium" : "")"
                                    @onclick="() => OnCategorySelected(cat)"
                                    @onclick:stopPropagation="true">
                                
                                @if (cat.Id == Category?.Id)
                                {
                                    <div class="w-2 h-2 bg-blue-500 rounded-full mr-3"></div>
                                }
                                else
                                {
                                    <div class="w-2 h-2 mr-3"></div>
                                }
                                
                                @cat.Name
                            </button>
                        }
                    }
                    else
                    {
                        <div class="px-4 py-2 text-sm text-gray-500 italic">
                            No categories available
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="p-4 sm:p-6">
            <MenuItemTable Category="Category" Categories="Categories" @key="Category" />
        </div>
    </div>
</div>

@code {
    // Your existing parameters
    [Parameter] public Category? Category { get; set; }
    [Parameter] public List<Category> Categories { get; set; } = new();
    [Parameter] public EventCallback<Category?> CategoryChanged { get; set; }

    // Dropdown state
    private bool isDropdownOpen = false;
    private Timer? hideTimer;

    private void ShowDropdown()
    {
        hideTimer?.Dispose();
        isDropdownOpen = true;
        StateHasChanged();
    }

    private void HideDropdown()
    {
        hideTimer?.Dispose();
        hideTimer = new Timer(async _ =>
        {
            isDropdownOpen = false;
            await InvokeAsync(StateHasChanged);
            hideTimer?.Dispose();
        }, null, 150, Timeout.Infinite);
    }

    private void ToggleDropdown()
    {
        if (isDropdownOpen)
        {
            isDropdownOpen = false;
            hideTimer?.Dispose();
        }
        else
        {
            ShowDropdown();
        }
    }

    private async Task OnCategorySelected(Category category)
    {
        Category = category;
        await CategoryChanged.InvokeAsync(category);
        isDropdownOpen = false;
        hideTimer?.Dispose();
        StateHasChanged();
    }

    public void Dispose()
    {
        hideTimer?.Dispose();
    }
}