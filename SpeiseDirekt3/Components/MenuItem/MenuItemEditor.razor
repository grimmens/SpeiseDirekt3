@using Microsoft.EntityFrameworkCore
@using SpeiseDirekt3.Data
@using SpeiseDirekt3.Model
@inject IJSRuntime JSRuntime

<div class="modal fade" id="menuItemEditModal" tabindex="-1" aria-labelledby="menuItemEditModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="menuItemEditModalLabel">
                    @(Input.Id == Guid.Empty ? "Neuen Menüpunkt hinzufügen" : "Menüpunkt bearbeiten")
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Schließen" @onclick="Cancel"></button>
            </div>
            <div class="modal-body">
                <EditForm @ref="editForm" EditContext="editContext" OnSubmit="OnSubmit">
                    <DataAnnotationsValidator />

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Name" id="MenuItem.Name" class="form-control" />
                        <label for="MenuItem.Name">Name</label>
                        <ValidationMessage For="() => Input.Name" class="text-danger" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputTextArea style="height:200px;" @bind-Value="Input.Description" id="MenuItem.Description" class="form-control"/>
                        <label for="MenuItem.Description">Beschreibung</label>
                    </div>

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Allergens" id="MenuItem.Allergens" class="form-control" />
                        <label for="MenuItem.Allergens">Allergene</label>
                    </div>

                    <div class="form-floating mb-3">
                        <InputNumber @bind-Value="Input.Price" id="MenuItem.Price" class="form-control" />
                        <label for="MenuItem.Price">Preis</label>
                        <ValidationMessage For="() => Input.Price" class="text-danger" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="Input.CategoryId" class="form-select">
                            <option value="">-- Kategorie wählen --</option>
                            @foreach (var cat in Categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        </InputSelect>
                        <label for="MenuItem.CategoryId">Kategorie</label>
                        <ValidationMessage For="() => Input.CategoryId" class="text-danger" />
                    </div>

                    <div class="d-flex justify-content-between">
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">Abbrechen</button>
                        <button type="submit" class="btn btn-primary">Speichern</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public MenuItem Input { get; set; } = new();
    [Parameter] public EventCallback<MenuItem> OnOk { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public List<Category> Categories { get; set; } = new();
    [Parameter] public Category SelectedCategory{ get; set; }
    [Inject] private ApplicationDbContext Context { get; set; }

    private EditContext editContext = new(new MenuItem());
    private EditForm editForm;

    protected override async Task OnInitializedAsync()
    {
        Input.CategoryId = SelectedCategory.Id;
    }

    private async Task OnSubmit()
    {
        editContext = new EditContext(Input);
        editForm.EditContext = editContext;

        if (!editContext.Validate())
            return;

        await OnOk.InvokeAsync(Input);
        await CloseModal();
    }

    public async Task ShowModal()
    {
        editContext = new EditContext(Input);
        await JSRuntime.InvokeVoidAsync("openModal", "menuItemEditModal");
    }

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("hideModal", "menuItemEditModal");
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
        await CloseModal();
    }
}
