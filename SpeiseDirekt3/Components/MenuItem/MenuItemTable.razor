@using Microsoft.EntityFrameworkCore
@using SpeiseDirekt3.Components.Shared
@using SpeiseDirekt3.Data
@using SpeiseDirekt3.Model
@using Microsoft.AspNetCore.Components.Forms
@using SpeiseDirekt3.ServiceInterface
@inject ApplicationDbContext Context
@inject INotificationService NotificationService
@inject IImageUploadService ImageUploadService

<div class="mb-4 flex flex-col sm:flex-row gap-2 sm:gap-4">
    <button @onclick="CreateNewMenuItem" class="btn btn-sm btn-primary" disabled="@isWorking">
        ➕ New Menu Entry
    </button>
    <button @onclick="CreateNewMenuEntries" class="btn btn-sm btn-primary" disabled="@isWorking">
        @if (isWorking)
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            <text>Generating...</text>
        }
        else
        {
            <text>🍽️✨ Generate Menu Items</text>
        }
    </button>
    <button type="button" class="btn btn-sm btn-secondary" @onclick="DeleteAll" disabled="@isWorking">
        Delete All
    </button>
</div>

@if (Category != null)
{
    <div class="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden mb-8">
        <!-- Header -->
        <div class="bg-gradient-to-r from-blue-600 to-blue-700 px-4 sm:px-6 py-4">
            <h5 class="text-lg sm:text-xl font-bold text-white mb-0">@Category.Name Menu Items</h5>
        </div>

        <!-- Body -->
        <div class="p-4 sm:p-6">
            @if (MenuItems.Any())
            {
                <!-- Responsive Table Wrapper -->
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-300">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Image</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                                <th class="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var item in PagedMenuItems)
                            {
                                <tr class="hover:bg-gray-50 transition-colors duration-200">
                                    <td class="px-4 py-4 whitespace-nowrap">
                                        <img src="@ImageUploadService.GetImageUrl(item.ImagePath)"
                                             alt="@item.Name"
                                             class="w-12 h-12 object-cover rounded-lg border border-gray-200" />
                                    </td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@item.Name</td>
                                    <td class="px-4 py-4 whitespace-nowrap text-sm font-semibold text-blue-600">@item.Price.ToString("C")</td>
                                    <td class="px-4 py-4 text-sm text-gray-600 max-w-[200px] truncate">@item.Description</td>
                                    <td class="px-4 py-4 whitespace-nowrap text-right text-sm font-medium">
                                        <div class="flex justify-end flex-wrap gap-2">
                                            <button class="inline-flex items-center px-3 py-1.5 bg-blue-600 hover:bg-blue-700 text-white text-xs font-medium rounded-md transition-colors"
                                                    @onclick="() => EditMenuItem(item)">
                                                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                                </svg>
                                                Edit
                                            </button>
                                            <button class="inline-flex items-center px-3 py-1.5 bg-red-600 hover:bg-red-700 text-white text-xs font-medium rounded-md transition-colors"
                                                    @onclick="() => DeleteMenuItem(item.Id)">
                                                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                </svg>
                                                Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="mt-6">
                    <PaginationComponent CurrentPage="@currentPage"
                                         PageSize="@pageSize"
                                         TotalNumberOfItems="@MenuItems.Count"
                                         SetPage="@SetPageHandler" />
                </div>
            }
            else
            {
                <!-- Empty State -->
                <div class="text-center py-12">
                    <div class="mx-auto h-16 w-16 text-gray-400 mb-4">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" class="w-full h-full">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                        </svg>
                    </div>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">No menu items</h3>
                    <p class="text-gray-500 mb-6">Get started by adding your first menu item to this category.</p>
                    <button class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors"
                            @onclick="CreateNewMenuItem">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Add Menu Item
                    </button>
                </div>
            }
        </div>
    </div>
}

<MenuItemEditor @ref="menuItemEditor" OnOk="HandleOk" OnCancel="HandleCancel" SelectedCategory="Category" Categories="Categories" />


@code {
    [Parameter] public Category Category { get; set; }
    [Parameter] public List<Category> Categories { get; set; }
    [Inject] private IMenuItemGenerator MenuItemGenerator { get; set; }


    List<MenuItem> MenuItems = new();
    MenuItem Input = new();
    EditContext editContext;
    EditForm editForm;
    MenuItemEditor menuItemEditor;

    private bool isWorking;
    // Pagination parameters.
    private int currentPage = 1;
    private int pageSize = 10;

    // Return only the items for the current page.
    private IEnumerable<MenuItem> PagedMenuItems =>
        MenuItems.Skip((currentPage - 1) * pageSize).Take(pageSize);

    // Update current page based on the pagination component's event.
    private void SetPageHandler(int page)
    {
        currentPage = page;
    }


    protected override async Task OnParametersSetAsync()
    {
        if (Category != null)
        {
            Input = new MenuItem { CategoryId = Category.Id };
            editContext = new EditContext(Input);
            await LoadItems();
        }
    }


    async Task LoadItems()
    {
        MenuItems = await Context.MenuItems
            .Where(m => m.CategoryId == Category.Id)
            .ToListAsync();
    }

    async Task SaveAsync()
    {
        if (!editContext.Validate()) return;

        Input.CategoryId = Category.Id;
        Context.MenuItems.Add(Input);
        await Context.SaveChangesAsync();

        Input = new MenuItem { CategoryId = Category.Id };
        editContext = new EditContext(Input);
        await LoadItems();
    }

    async Task DeleteMenuItem(Guid id)
    {
        var item = await Context.MenuItems.FindAsync(id);
        if (item != null)
        {
            var confirm = await NotificationService.ShowConfirmation(("Delete", $"Delete \"{item.Name}\"?"));
            if (confirm)
            {
                Context.MenuItems.Remove(item);
                await Context.SaveChangesAsync();
                await LoadItems();
            }
        }
    }

    async Task CreateNewMenuItem()
    {
        // prepare a fresh model
        menuItemEditor.Input = new MenuItem { CategoryId = Category.Id };
        await menuItemEditor.ShowModal();
    }

    async void EditMenuItem(MenuItem item)
    {
        menuItemEditor.Input = item;
        await menuItemEditor.ShowModal();
    }

    async Task HandleOk(MenuItem item)
    {
        if (item.Id == Guid.Empty)
            Context.Add(item);
        else
            Context.MenuItems.Update(item);
        await Context.SaveChangesAsync();
        await LoadItems();
    }

    Task HandleCancel()
    {
        menuItemEditor.Input = new();
        return Task.CompletedTask;
    }

    async Task CreateNewMenuEntries()
    {
        isWorking = true;
        try
        {
            var newEntries = await MenuItemGenerator.CreateMockMenuEntriesAsync(Category, 10);
            if (newEntries.Any())
            {
                await Context.AddRangeAsync(newEntries);
                await Context.SaveChangesAsync();
                await LoadItems();
                Console.WriteLine($"Successfully generated {newEntries.Count()} AI menu items!");
            }
            else
            {
                Console.WriteLine("Warning: AI service is not available. Generating fallback menu items...");
                await CreateFallbackMenuItems();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating AI menu entries: {ex.Message}");
            Console.WriteLine("AI service unavailable. Generating fallback menu items...");
            await CreateFallbackMenuItems();
        }
        finally
        {
            isWorking = false;
        }
    }

    async Task CreateFallbackMenuItems()
    {
        try
        {
            var fallbackItems = GenerateFallbackMenuItems(Category, 5);
            await Context.AddRangeAsync(fallbackItems);
            await Context.SaveChangesAsync();
            await LoadItems();
            Console.WriteLine($"Generated {fallbackItems.Count} fallback menu items for category: {Category.Name}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating fallback menu items: {ex.Message}");
        }
    }

    List<MenuItem> GenerateFallbackMenuItems(Category category, int count)
    {
        var items = new List<MenuItem>();
        var random = new Random();

        // Sample menu items based on category name
        var sampleItems = GetSampleItemsForCategory(category.Name.ToLower());

        for (int i = 0; i < count && i < sampleItems.Count; i++)
        {
            var sample = sampleItems[i];
            items.Add(new MenuItem
            {
                Id = Guid.NewGuid(),
                Name = sample.Name,
                Description = sample.Description,
                Allergens = sample.Allergens,
                Price = (decimal)(random.NextDouble() * 15.0 + 5.0), // Random price between 5-20
                CategoryId = category.Id
            });
        }

        return items;
    }

    List<(string Name, string Description, string Allergens)> GetSampleItemsForCategory(string categoryName)
    {
        // Default items that work for most categories
        var defaultItems = new List<(string, string, string)>
        {
            ("Klassisches Gericht", "Ein traditionelles und beliebtes Gericht", "G, M"),
            ("Hausgemachte Spezialität", "Nach unserem besonderen Rezept zubereitet", "G"),
            ("Saisonale Auswahl", "Mit frischen, saisonalen Zutaten", ""),
            ("Chef's Empfehlung", "Vom Küchenchef persönlich empfohlen", "G, M"),
            ("Regionale Köstlichkeit", "Mit lokalen Zutaten zubereitet", "M")
        };

        // Category-specific items
        if (categoryName.Contains("vorspeise") || categoryName.Contains("starter"))
        {
            return new List<(string, string, string)>
            {
                ("Bruschetta", "Geröstetes Brot mit Tomaten und Basilikum", "G"),
                ("Carpaccio", "Hauchdünn geschnittenes Rindfleisch", "M"),
                ("Suppe des Tages", "Täglich wechselnde hausgemachte Suppe", ""),
                ("Antipasti Teller", "Auswahl italienischer Vorspeisen", "G, M"),
                ("Caesar Salad", "Klassischer Salat mit Parmesan", "G, M, E")
            };
        }
        else if (categoryName.Contains("hauptgang") || categoryName.Contains("main"))
        {
            return new List<(string, string, string)>
            {
                ("Schnitzel Wiener Art", "Paniertes Kalbsschnitzel mit Zitrone", "G, E"),
                ("Pasta Carbonara", "Spaghetti mit Speck und Ei", "G, M, E"),
                ("Gegrilltes Lachs", "Mit Kräuterbutter und Gemüse", "F, M"),
                ("Rinderfilet", "Medium gebraten mit Pfeffersauce", "M"),
                ("Vegetarische Lasagne", "Mit Gemüse und Béchamelsauce", "G, M")
            };
        }
        else if (categoryName.Contains("dessert") || categoryName.Contains("nachspeise"))
        {
            return new List<(string, string, string)>
            {
                ("Tiramisu", "Klassisches italienisches Dessert", "G, M, E"),
                ("Schokoladenkuchen", "Warmer Kuchen mit Vanilleeis", "G, M, E"),
                ("Panna Cotta", "Mit Beerensauce", "M"),
                ("Apfelstrudel", "Mit Vanillesauce", "G, M, E"),
                ("Eis-Variation", "Drei Kugeln nach Wahl", "M")
            };
        }
        else if (categoryName.Contains("getränk") || categoryName.Contains("drink"))
        {
            return new List<(string, string, string)>
            {
                ("Hauswein", "Rotwein oder Weißwein", "S"),
                ("Craft Beer", "Lokales Bier vom Fass", "G"),
                ("Espresso", "Italienischer Kaffee", ""),
                ("Frischer Orangensaft", "Täglich gepresst", ""),
                ("Mineralwasser", "Still oder sprudelnd", "")
            };
        }

        return defaultItems;
    }

    async Task DeleteAll()
    {
        isWorking = true;
        Context.RemoveRange(Context.MenuItems.Where(e => e.CategoryId == Category.Id));
        await Context.SaveChangesAsync();
        await LoadItems();
        isWorking = false;
    }
}
