@page "/MenuItems/{MenuId}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using SpeiseDirekt3.Data
@using SpeiseDirekt3.Model
@using SpeiseDirekt3.Infrastructure
@using SpeiseDirekt3.ServiceInterface
@attribute [Authorize]

<PageTitle>Menu Items</PageTitle>

<div class="container mt-5">
    <!-- Breadcrumb -->
    <nav style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='%236c757d'/%3E%3C/svg%3E&#34;);" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="/menus">Menus</a>
            </li>
            <li class="breadcrumb-item" aria-current="page">
                <a href="@($"/categories/{Menu?.Id}")">@Menu?.Name</a>
            </li>
            <li class="breadcrumb-item" aria-current="page">
                Menu Items
            </li>
        </ol>
    </nav>

    <h1 class="mb-4 text-primary">🍽️ Menu Items for @Menu?.Name</h1>

    @if (Categories.Any())
    {
        <ul class="nav nav-tabs mb-3">
            @foreach (var cat in Categories)
            {
                <li class="nav-item">
                    <a class="nav-link @(cat.Id == SelectedCategoryId ? "active" : "")"
                       @onclick="() => SelectCategory(cat.Id)">
                        @cat.Name
                    </a>
                </li>
            }
        </ul>

        <div>
            @if (SelectedCategory != null)
            {
                <MenuItemTable Category="SelectedCategory"
                               Categories="Categories" />
            }
        </div>
    }
    else
    {
        <p class="text-muted">No categories available. Please add some first.</p>
    }
</div>


@code {
    [Parameter]
    public string MenuId { get; set; }
    [Inject] public ApplicationDbContext Context { get; set; }
    [Inject] public INotificationService NotificationService { get; set; }

    Guid? SelectedCategoryId { get; set; }
    Category? SelectedCategory { get; set; }
    Menu? Menu { get; set; }
    List<Category> Categories { get; set; } = [];
    MenuItem Input { get; set; } = new();
    EditContext editContext = new(new MenuItem());
    EditForm editForm;

    MenuItemEditor menuItemEditor;

    protected override async Task OnInitializedAsync()
    {
        Menu = await Context.Menus.FindAsync(new Guid(MenuId));
        Categories = await Context.Categories.Where(m => m.MenuId == Menu.Id).ToListAsync();
        SelectedCategory = Categories.Any() ? Categories.First() : null;
        SelectedCategoryId = SelectedCategory?.Id;
    }


    void SelectCategory(Guid categoryId)
    {
        SelectedCategoryId = categoryId;
        SelectedCategory = Categories.Where(e => e.Id == categoryId).SingleOrDefault();
        Input = new MenuItem { CategoryId = categoryId };
        editContext = new EditContext(Input);
    }

}
