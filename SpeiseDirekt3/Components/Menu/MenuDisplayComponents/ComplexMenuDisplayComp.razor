@page "/elissar-menu"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using SpeiseDirekt3.Model
@layout MenuLayout
@inject IJSRuntime JSRuntime


<div class="relative min-h-screen bg-gray-50">
    @if (SelectedItem != null)
    {
        <ComplexMenuDisplayMenuItemOverlayComp @bind-SelectedItem="SelectedItem" />
    }
    <!-- Main Menu View -->
    <!-- Restaurant Header -->
    <div class="relative h-48 bg-gradient-to-br from-orange-200 via-teal-200 to-blue-200 overflow-hidden">
        <div class="absolute inset-0 bg-black bg-opacity-20"></div>
        <div class="absolute inset-0 flex flex-col items-center justify-center text-white">
            <div class="w-16 h-16 bg-teal-600 rounded-full flex items-center justify-center mb-3 shadow-lg">
                <div class="w-6 h-6 bg-orange-300 rounded-full relative">
                    <div class="absolute inset-1 bg-orange-400 rounded-full"></div>
                    <div class="absolute top-1 left-1 w-1.5 h-1.5 bg-white rounded-full"></div>
                </div>
            </div>
            <h1 class="text-2xl font-bold tracking-wide">@Menu?.Name</h1>
            @if (!string.IsNullOrEmpty(Menu?.Description))
            {
                <p class="text-sm text-white/80 mt-1">@Menu.Description</p>
            }
        </div>
    </div>

    <!-- Categories Grid Section -->
    <div class="bg-white py-6" @ref="categoryGridRef">
        <div class="px-4 mb-6">
            <h2 class="text-xl font-bold text-gray-900 mb-6">Kategorie wählen</h2>

            <!-- All Categories in Flowing Layout -->
            <div class="flex flex-wrap gap-2 mb-6">
                @if (categories.Any())
                {
                    @foreach (var category in categories)
                    {
                        <button @onclick="() => ScrollToCategory(category)"
                        class="@GetCategoryButtonClass(category)">
                            @category
                        </button>
                    }
                }
                else
                {
                    <p class="text-gray-500">Keine Kategorien verfügbar</p>
                }
            </div>

            @if (Menu?.ComplexNavigation == true)
            {
                <button class="flex items-center gap-2 text-gray-600 hover:text-gray-800 transition-colors">
                    <span>mehr anzeigen</span>
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                </button>
            }
        </div>
    </div>

    <!-- Sticky Category Navigation -->
    @if (showStickyNav && !Preview && categories.Any())
    {
        <!-- Sticky Category Navigation -->
        <div class="fixed top-0 left-0 w-full z-40 bg-white border-b border-gray-200 shadow-sm transform transition-transform duration-300">
            <div class="mx-auto max-w-screen-lg py-2 scrollbar-hide">
                <div class="flex gap-2 overflow-x-auto scrollbar-hide" @ref="stickyNavRef">
                    <div class="ml-2">
                    </div>
                    @foreach (var category in categories)
                    {
                        <button @onclick="() => ScrollToCategory(category)"
                        class="@GetCategoryButtonClass(category)">
                            @category
                        </button>
                    }
                    <div class="ml-2">
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Menu Content -->
    <div class="@($"pb-20 {(showStickyNav ? "pt-16" : "")}")">
        @{
            int categoryIndex = 0;
        }
        @foreach (var category in categories)
        {
            var items = GetMenuItemsForCategory(category);
            if (items.Any())
            {
                var currentIndex = categoryIndex;
                <div class="py-6 bg-gray-50" @ref="categoryElements[currentIndex]" data-category="@category" @key="@category">
                    <div class="px-4 mb-4">
                        <h2 class="text-xl font-bold text-gray-900 mb-1">@category</h2>
                    </div>

                    <div class="px-4">
                        <div class="grid grid-cols-2 gap-3">
                            @foreach (var item in items)
                            {
                                <div @ref="MenuItemReferences[item]" class="bg-white rounded-xl shadow-sm overflow-hidden cursor-pointer hover:shadow-md transition-all duration-200"
                                @onclick="() => SelectedItem = item">
                                    <div class="aspect-square bg-gradient-to-br from-orange-100 to-green-100 relative overflow-hidden">
                                        @if (!string.IsNullOrEmpty(item.ImagePath))
                                        {
                                            <img src="@item.ImagePath" alt="@item.Name" class="w-full h-full object-cover" />
                                        }
                                        else
                                        {
                                            <div class="absolute inset-0 bg-gradient-to-t from-black from-opacity-10 to-transparent"></div>
                                            <div class="absolute inset-0 flex items-center justify-center">
                                                <div class="w-24 h-24 bg-teal-100 rounded-full flex items-center justify-center border-3 border-yellow-200 shadow-lg">
                                                    <div class="text-xl">🥙</div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    <div class="p-4">
                                        <div class="flex items-start gap-2 mb-2">
                                            <h3 class="font-bold text-gray-900 text-sm flex-1 leading-tight">@item.Name</h3>
                                        </div>
                                        <p class="text-gray-600 text-xs mb-3 line-clamp-2 leading-relaxed">@item.Description</p>
                                        <div class="flex justify-between items-center">
                                            <span class="font-bold text-gray-900 text-sm">€ @item.Price.ToString("F2")</span>
                                            @if (!string.IsNullOrEmpty(item.Allergens))
                                            {
                                                <span class="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded font-medium">@item.Allergens</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                categoryIndex++;
            }
        }

        @if (!categories.Any())
        {
            <div class="py-12 text-center">
                <p class="text-gray-500">Keine Kategorien oder Menüelemente verfügbar</p>
            </div>
        }

        <!-- End of menu spacer -->
        <div class="h-12"></div>
    </div>
    @if (!Preview)
    {
        <ComplexDisplayBottomNavigation Menu="Menu" OnMenuItemSelected="SelectMenuItem" />
    }
</div>

@code {
    [Parameter] public Menu? Menu { get; set; }
    [Parameter] public bool Preview { get; set; }
    private string activeCategory = "";
    private MenuItem? SelectedItem { get; set; }
    private bool showStickyNav = false;
    private ElementReference categoryGridRef;
    private ElementReference stickyNavRef;
    private IJSObjectReference? jsModule;
    private DotNetObjectReference<ComplexMenuDisplayComp>? dotNetRef;
    private Dictionary<MenuItem, ElementReference> MenuItemReferences { get; set; } = new();

    // Array to hold category element references
    private ElementReference[] categoryElements = new ElementReference[20]; // Increased size for flexibility

    private List<string> categories = new();

    protected override void OnParametersSet()
    {
        // Initialize categories and active category when Menu parameter changes
        if (Menu?.Categories != null)
        {
            categories = Menu.Categories
                .Where(c => c.MenuItems?.Any() == true)
                .Select(c => c.Name)
                .ToList();

            activeCategory = categories.FirstOrDefault() ?? "";
        }
        else
        {
            categories = new List<string>();
            activeCategory = "";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && categories.Any())
        {
            jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/elissar-menu.js");
            dotNetRef = DotNetObjectReference.Create(this);
            await jsModule.InvokeVoidAsync("initialize", dotNetRef, categoryGridRef, categoryElements, categories.ToArray());
        }
    }

    private async Task ScrollToCategory(string category)
    {
        activeCategory = category;
        if (jsModule != null)
        {
            await jsModule.InvokeVoidAsync("scrollToCategory", category, showStickyNav);
        }
    }

    [JSInvokable]
    public void UpdateActiveCategory(string category)
    {
        activeCategory = category;
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void UpdateStickyNav(bool show)
    {
        showStickyNav = show;
        InvokeAsync(StateHasChanged);
    }

    private string GetCategoryButtonClass(string category)
    {
        var baseClass = "px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap transition-all duration-200";
        return activeCategory == category
            ? $"{baseClass} bg-teal-600 text-white shadow-md"
            : $"{baseClass} bg-gray-100 text-gray-700 hover:bg-gray-200";
    }

    private List<MenuItem> GetMenuItemsForCategory(string categoryName)
    {
        if (Menu?.Categories == null) return new List<MenuItem>();

        var category = Menu.Categories.FirstOrDefault(c => c.Name == categoryName);
        return category?.MenuItems?.ToList() ?? new List<MenuItem>();
    }

    private async Task SelectMenuItem(MenuItem? menuItem)
    {
        if(menuItem != null)
        {
            SelectedItem = menuItem;
            var elem = MenuItemReferences[menuItem];
            await jsModule.InvokeVoidAsync("scrollToAnyElement", elem);
        }
    }
}