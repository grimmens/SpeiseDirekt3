@page "/qrcode/edit/{Id:guid?}"
@using Microsoft.EntityFrameworkCore
@using QRCoder
@using SpeiseDirekt3.Model
@inject ApplicationDbContext DbContext
@inject NavigationManager NavManager

<PageTitle>@(IsNew ? "Create QR Code" : "Edit QR Code") - Speise-Direkt</PageTitle>

<!-- QR Code Edit Page -->
<!-- Header Section -->
<div class="bg-white rounded-xl shadow-sm border border-gray-200 mb-8">
    <div class="p-6">
            <!-- Breadcrumb -->
            <nav class="flex mb-4" aria-label="Breadcrumb">
                <ol class="inline-flex items-center space-x-1 md:space-x-3">
                    <li class="inline-flex items-center">
                        <a href="/qrcodes" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
                            </svg>
                            QR Codes
                        </a>
                    </li>
                    <li>
                        <div class="flex items-center">
                            <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                            </svg>
                            <span class="ml-1 text-sm font-medium text-gray-500">@(IsNew ? "Create" : "Edit")</span>
                        </div>
                    </li>
                </ol>
            </nav>

            <!-- Page Header -->
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <div class="h-12 w-12 bg-blue-100 rounded-lg flex items-center justify-center">
                        <svg class="h-6 w-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
                        </svg>
                    </div>
                </div>
                <div class="ml-4">
                    <h1 class="text-3xl font-bold text-gray-900 font-display">@(IsNew ? "Create QR Code" : "Edit QR Code")</h1>
                    <p class="mt-1 text-gray-600">@(IsNew ? "Generate a new QR code for your digital menu" : "Update your QR code settings")</p>
                </div>
            </div>
        </div>
    </div>

<!-- Content Section -->
<div class="bg-white rounded-xl shadow-sm border border-gray-200">
    <div class="p-8">
        <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit" class="space-y-8">
            <DataAnnotationsValidator />
            <ValidationSummary class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm" />

            <!-- QR Code Title -->
            <div>
                <label for="qrTitle" class="block text-sm font-medium text-gray-700 mb-2">QR Code Title</label>
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                        </svg>
                    </div>
                    <InputText @bind-Value="Item.Title"
                               id="qrTitle"
                               class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200"
                               placeholder="Enter a descriptive title for your QR code" />
                </div>
                <ValidationMessage For="@(() => Item.Title)" class="mt-1 text-sm text-red-600" />
                <p class="mt-1 text-xs text-gray-500">This title will help you identify the QR code in your dashboard</p>
            </div>

            <!-- Display Mode Selection -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-4">Menu Display Mode</label>
                <div class="bg-gray-50 rounded-lg p-4">
                    <InputRadioGroup Name="displayMode" @bind-Value="@Item.IsTimeTableBased" class="space-y-4">
                        <div class="flex items-start">
                            <div class="flex items-center h-5">
                                <InputRadio id="simple" name="displayMode" Value="false" class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300" />
                            </div>
                            <div class="ml-3">
                                <label for="simple" class="font-medium text-gray-900 cursor-pointer">Simple Menu</label>
                                <p class="text-gray-500 text-sm">Display a single menu at all times</p>
                            </div>
                        </div>
                        <div class="flex items-start">
                            <div class="flex items-center h-5">
                                <InputRadio id="timetable" name="displayMode" Value="true" class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300" />
                            </div>
                            <div class="ml-3">
                                <label for="timetable" class="font-medium text-gray-900 cursor-pointer">Schedule-based Menu</label>
                                <p class="text-gray-500 text-sm">Display different menus based on time schedules (breakfast, lunch, dinner)</p>
                            </div>
                        </div>
                    </InputRadioGroup>
                </div>
            </div>

            @if (Item.IsNotTimeTableBased)
            {
                <!-- Simple Menu Selection -->
                <div>
                    <label for="menuSelect" class="block text-sm font-medium text-gray-700 mb-2">Select Menu</label>
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                            </svg>
                        </div>
                        <InputSelect @bind-Value="Item.MenuId" id="menuSelect"
                                     class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200">
                            <option value="">-- Select a Menu --</option>
                            @foreach (var m in menus)
                            {
                                <option value="@m.Id">@m.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <ValidationMessage For="@(() => Item.MenuId)" class="mt-1 text-sm text-red-600" />
                    <p class="mt-1 text-xs text-gray-500">Choose which menu will be displayed when customers scan this QR code</p>
                </div>
            }
            else
            {
                <!-- Schedule-based Menu Configuration -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-4">Time-based Menu Schedule</label>
                    <div class="bg-gray-50 rounded-lg p-6">
                        <QrCodeTimeTableEntries QRCodeId="@Item.Id" TimeTableEntries="@Item.TimeTableEntries">
                            <ValidationMessage For="@(() => Item.TimeTableEntries)" class="mt-1 text-sm text-red-600" />
                        </QrCodeTimeTableEntries>
                    </div>
                </div>
            }

            <!-- QR Code Preview -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-4">QR Code Preview</label>
                <div class="bg-gray-50 rounded-lg p-6 text-center">
                    @if (!string.IsNullOrEmpty(qrDataUrl))
                    {
                        <div class="inline-block p-4 bg-white rounded-lg shadow-sm">
                            <QrCodePreview QrId="@Item.Id" ThumbnailSize="150" />
                        </div>
                        <p class="mt-3 text-sm text-gray-600">This is how your QR code will appear</p>
                    }
                    else
                    {
                        <div class="py-8">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
                            </svg>
                            <p class="mt-2 text-sm text-gray-500">Configure your menu settings to see the QR code preview</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex justify-end space-x-4 pt-6 border-t border-gray-200">
                <button type="button"
                        class="inline-flex items-center px-6 py-3 border border-gray-300 rounded-lg shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
                        @onclick="Cancel">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                    Cancel
                </button>
                <button type="submit"
                        class="inline-flex items-center px-6 py-3 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    @(IsNew ? "Create QR Code" : "Save Changes")
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public Guid? Id { get; set; }

    private QRCode Item = new();
    private EditContext editContext { get; set; } = new(new QRCode());
    private List<Menu> menus = new();
    private string qrDataUrl = "";
    private bool IsNew => !Id.HasValue;

    protected override async Task OnInitializedAsync()
    {
        menus = await DbContext.Menus.OrderBy(m => m.Name).ToListAsync();

        if (IsNew)
        {
            // give it a code immediately so preview shows
            Item.Id = Guid.NewGuid();
        }
        else
        {
            var existing = await DbContext.QRCodes
                .Include(e => e.TimeTableEntries)
                .SingleOrDefaultAsync(e => e.Id == Id.Value);
            if (existing != null)
                Item = existing;
        }

        Item.TimeTableEntries = Item.TimeTableEntries?
            .OrderBy(e => e.StartTime)
            .ToList();

        editContext = new EditContext(Item);
        editContext.OnFieldChanged += (_, __) => GeneratePreview();
        GeneratePreview();
    }

    private void GeneratePreview()
    {
        if (Item.Id == Guid.Empty)
        {
            qrDataUrl = "";
            return;
        }

        var url = $"{NavManager.BaseUri}qr/{Item.Id}";
        using var generator = new QRCodeGenerator();
        using var data = generator.CreateQrCode(url, QRCodeGenerator.ECCLevel.Q);
        using var png = new PngByteQRCode(data);
        var bytes = png.GetGraphic(20);
        qrDataUrl = $"data:image/png;base64,{Convert.ToBase64String(bytes)}";
    }

    private async Task HandleValidSubmit()
    {
        if (IsNew)
        {
            Item.Id = Guid.NewGuid();
            Item.CreatedAt = DateTime.UtcNow;
            DbContext.QRCodes.Add(Item);
        }
        else
        {
            DbContext.QRCodes.Update(Item);
        }

        await DbContext.SaveChangesAsync();
        NavManager.NavigateTo("/qrcodes");
    }

    private void Cancel() => NavManager.NavigateTo("/qrcodes");
}
